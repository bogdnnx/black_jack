import random
from typing import List


class BlackJack:
    """–ö–ª–∞—Å—Å –¥–ª—è –∏–≥—Ä—ã –≤ –ë–ª—ç–∫ –î–∂–µ–∫ —Å —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ–π –∫–æ–ª–æ–¥–æ–π –∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º."""

    def __init__(self) -> None:
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–≥—Ä—ã: –ø—É—Å—Ç—ã–µ —Ä—É–∫–∏ –∏–≥—Ä–æ–∫–æ–≤, –ø–æ–ª–Ω–∞—è –∫–æ–ª–æ–¥–∞ –∫–∞—Ä—Ç."""
        self.user_hand: List[int] = []
        self.dealer_hand: List[int] = []
        self.deck: List[int] = self._create_deck()

    @staticmethod
    def _create_deck() -> List[int]:
        """–°–æ–∑–¥–∞–µ—Ç –∏ –ø–µ—Ä–µ–º–µ—à–∏–≤–∞–µ—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é –∫–æ–ª–æ–¥—É –∏–∑ 52 –∫–∞—Ä—Ç."""
        deck = [2, 3, 4, 5, 6, 7, 8, 9, 10, 10, 10, 10, 11] * 4  # 4 –º–∞—Å—Ç–∏
        random.shuffle(deck)
        return deck

    def _draw_card(self) -> int:
        """–í—ã–¥–∞–µ—Ç –æ–¥–Ω—É –∫–∞—Ä—Ç—É –∏–∑ –∫–æ–ª–æ–¥—ã."""
        if not self.deck:
            raise RuntimeError("–û—à–∏–±–∫–∞: –∫–æ–ª–æ–¥–∞ –ø—É—Å—Ç–∞!")
        return self.deck.pop()

    def _calculate_score(self, hand: List[int]) -> int:
        """–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –∏—Ç–æ–≥–æ–≤—É—é —Å—É–º–º—É –∫–∞—Ä—Ç –≤ —Ä—É–∫–µ —Å —É—á–µ—Ç–æ–º –¢—É–∑–æ–≤."""
        score = sum(hand)
        aces = hand.count(11)  # –°—á–∏—Ç–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¢—É–∑–æ–≤
        while score > 21 and aces:
            score -= 10
            aces -= 1
        return score

    def _display_hands(self, reveal_dealer: bool = False) -> None:
        """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –∫–∞—Ä—Ç—ã –∏–≥—Ä–æ–∫–∞ –∏ –¥–∏–ª–µ—Ä–∞."""
        print("\n" + "=" * 30)
        print(f"–í–∞—à–∏ –∫–∞—Ä—Ç—ã: {self.user_hand} (—Å—É–º–º–∞: {self._calculate_score(self.user_hand)})")
        if reveal_dealer:
            print(f"–ö–∞—Ä—Ç—ã –¥–∏–ª–µ—Ä–∞: {self.dealer_hand} (—Å—É–º–º–∞: {self._calculate_score(self.dealer_hand)})")
        else:
            print(f"–ö–∞—Ä—Ç—ã –¥–∏–ª–µ—Ä–∞: [{self.dealer_hand[0]}, X]")
        print("=" * 30)

    def _player_turn(self) -> None:
        """–•–æ–¥ –∏–≥—Ä–æ–∫–∞."""
        while True:
            self._display_hands()
            if self._calculate_score(self.user_hand) > 21:
                print("‚ùå –í—ã –ø–µ—Ä–µ–±—Ä–∞–ª–∏! –ö–æ–Ω–µ—Ü –∏–≥—Ä—ã.")
                break
            choice = input("üëâ –•–æ—Ç–∏—Ç–µ –≤–∑—è—Ç—å –µ—â–µ –∫–∞—Ä—Ç—É? (–¥–∞/–Ω–µ—Ç): ").strip().lower()
            if choice in {"–¥–∞", "yes", "y"}:
                self.user_hand.append(self._draw_card())
            elif choice in {"–Ω–µ—Ç", "no", "n"}:
                print("‚úîÔ∏è –í—ã –æ—Å—Ç–∞–Ω–æ–≤–∏–ª–∏—Å—å.")
                break
            else:
                print("‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥. –í–≤–µ–¥–∏—Ç–µ '–¥–∞' –∏–ª–∏ '–Ω–µ—Ç'.")

    def _dealer_turn(self) -> None:
        """–•–æ–¥ –¥–∏–ª–µ—Ä–∞: –¥–æ–±–∏—Ä–∞–µ—Ç –∫–∞—Ä—Ç—ã –¥–æ 17 –æ—á–∫–æ–≤."""
        print("\nü§ñ –•–æ–¥ –¥–∏–ª–µ—Ä–∞...")
        while self._calculate_score(self.dealer_hand) < 17:
            self.dealer_hand.append(self._draw_card())
        if self._calculate_score(self.dealer_hand) > 21:
            print("üéâ –î–∏–ª–µ—Ä –ø–µ—Ä–µ–±—Ä–∞–ª! –í—ã –ø–æ–±–µ–¥–∏–ª–∏!")

    def _determine_winner(self) -> None:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –ø–æ–±–µ–¥–∏—Ç–µ–ª—è –∏ –≤—ã–≤–æ–¥–∏—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã."""
        user_score = self._calculate_score(self.user_hand)
        dealer_score = self._calculate_score(self.dealer_hand)

        self._display_hands(reveal_dealer=True)
        print("\n‚ú® *** –†–µ–∑—É–ª—å—Ç–∞—Ç—ã *** ‚ú®")
        if user_score > 21:
            print("‚ùå –í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏. –£ –≤–∞—Å –ø–µ—Ä–µ–±–æ—Ä.")
        elif dealer_score > 21 or user_score > dealer_score:
            print("üèÜ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º, –≤—ã –≤—ã–∏–≥—Ä–∞–ª–∏!")
        elif user_score < dealer_score:
            print("‚ùå –£–≤—ã, –≤—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏. –î–∏–ª–µ—Ä –æ–∫–∞–∑–∞–ª—Å—è —Å–∏–ª—å–Ω–µ–µ.")
        else:
            print("ü§ù –ù–∏—á—å—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞!")

    def play(self) -> None:
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –∏–≥—Ä—ã."""
        print("\nüé≤ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∏–≥—Ä—É –ë–ª—ç–∫ –î–∂–µ–∫! üé≤")
        print("üîπ –í–∞—à–∞ —Ü–µ–ª—å ‚Äì –Ω–∞–±—Ä–∞—Ç—å 21 –∏–ª–∏ –æ–±—ã–≥—Ä–∞—Ç—å –¥–∏–ª–µ—Ä–∞, –Ω–µ –ø–µ—Ä–µ–±—Ä–∞–≤.")
        print("üîπ –¢—É–∑ –º–æ–∂–µ—Ç –±—ã—Ç—å —Ä–∞–≤–µ–Ω 1 –∏–ª–∏ 11.")
        print("=" * 30)

        # –ù–∞—á–∞–ª—å–Ω—ã–µ –∫–∞—Ä—Ç—ã
        self.user_hand = [self._draw_card(), self._draw_card()]
        self.dealer_hand = [self._draw_card(), self._draw_card()]

        # –•–æ–¥—ã
        self._player_turn()
        if self._calculate_score(self.user_hand) <= 21:
            self._dealer_turn()
        self._determine_winner()


def main() -> None:
    """–¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ."""
    while True:
        game = BlackJack()
        try:
            game.play()
        except RuntimeError as e:
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
            break

        replay = input("\nüîÅ –•–æ—Ç–∏—Ç–µ —Å—ã–≥—Ä–∞—Ç—å —Å–Ω–æ–≤–∞? (–¥–∞/–Ω–µ—Ç): ").strip().lower()
        if replay not in {"–¥–∞", "yes", "y"}:
            print("üëã –°–ø–∞—Å–∏–±–æ –∑–∞ –∏–≥—Ä—É! –î–æ —Å–∫–æ—Ä–æ–π –≤—Å—Ç—Ä–µ—á–∏!")
            break


if __name__ == "__main__":
    main()
